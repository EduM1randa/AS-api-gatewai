/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: protos/protos/reservation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace reservation {
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            body?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("body" in data && data.body != undefined) {
                    this.body = data.body;
                }
            }
        }
        get body() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set body(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            body?: string;
        }): Message {
            const message = new Message({});
            if (data.body != null) {
                message.body = data.body;
            }
            return message;
        }
        toObject() {
            const data: {
                body?: string;
            } = {};
            if (this.body != null) {
                data.body = this.body;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.body.length)
                writer.writeString(1, this.body);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.body = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class CreateReservationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            user_id?: string;
            table_id?: string;
            reservation_date?: string;
            guest_count?: number;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("table_id" in data && data.table_id != undefined) {
                    this.table_id = data.table_id;
                }
                if ("reservation_date" in data && data.reservation_date != undefined) {
                    this.reservation_date = data.reservation_date;
                }
                if ("guest_count" in data && data.guest_count != undefined) {
                    this.guest_count = data.guest_count;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get table_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set table_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get reservation_date() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set reservation_date(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get guest_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set guest_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            user_id?: string;
            table_id?: string;
            reservation_date?: string;
            guest_count?: number;
            status?: string;
        }): CreateReservationRequest {
            const message = new CreateReservationRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.table_id != null) {
                message.table_id = data.table_id;
            }
            if (data.reservation_date != null) {
                message.reservation_date = data.reservation_date;
            }
            if (data.guest_count != null) {
                message.guest_count = data.guest_count;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                user_id?: string;
                table_id?: string;
                reservation_date?: string;
                guest_count?: number;
                status?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.table_id != null) {
                data.table_id = this.table_id;
            }
            if (this.reservation_date != null) {
                data.reservation_date = this.reservation_date;
            }
            if (this.guest_count != null) {
                data.guest_count = this.guest_count;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.user_id.length)
                writer.writeString(2, this.user_id);
            if (this.table_id.length)
                writer.writeString(3, this.table_id);
            if (this.reservation_date.length)
                writer.writeString(4, this.reservation_date);
            if (this.guest_count != 0)
                writer.writeInt32(5, this.guest_count);
            if (this.status.length)
                writer.writeString(6, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateReservationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateReservationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        message.table_id = reader.readString();
                        break;
                    case 4:
                        message.reservation_date = reader.readString();
                        break;
                    case 5:
                        message.guest_count = reader.readInt32();
                        break;
                    case 6:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CreateReservationRequest {
            return CreateReservationRequest.deserialize(bytes);
        }
    }
    export class GetReservationByIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): GetReservationByIDRequest {
            const message = new GetReservationByIDRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReservationByIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReservationByIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetReservationByIDRequest {
            return GetReservationByIDRequest.deserialize(bytes);
        }
    }
    export class GetReservationsByUserIDRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            user_id?: string;
        }): GetReservationsByUserIDRequest {
            const message = new GetReservationsByUserIDRequest({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReservationsByUserIDRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReservationsByUserIDRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetReservationsByUserIDRequest {
            return GetReservationsByUserIDRequest.deserialize(bytes);
        }
    }
    export class GetReservationsByDateRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reservation_date?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reservation_date" in data && data.reservation_date != undefined) {
                    this.reservation_date = data.reservation_date;
                }
            }
        }
        get reservation_date() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set reservation_date(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            reservation_date?: string;
        }): GetReservationsByDateRequest {
            const message = new GetReservationsByDateRequest({});
            if (data.reservation_date != null) {
                message.reservation_date = data.reservation_date;
            }
            return message;
        }
        toObject() {
            const data: {
                reservation_date?: string;
            } = {};
            if (this.reservation_date != null) {
                data.reservation_date = this.reservation_date;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reservation_date.length)
                writer.writeString(1, this.reservation_date);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetReservationsByDateRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetReservationsByDateRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.reservation_date = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetReservationsByDateRequest {
            return GetReservationsByDateRequest.deserialize(bytes);
        }
    }
    export class UpdateReservationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            table_id?: string;
            reservation_date?: string;
            guest_count?: number;
            status?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("table_id" in data && data.table_id != undefined) {
                    this.table_id = data.table_id;
                }
                if ("reservation_date" in data && data.reservation_date != undefined) {
                    this.reservation_date = data.reservation_date;
                }
                if ("guest_count" in data && data.guest_count != undefined) {
                    this.guest_count = data.guest_count;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get table_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set table_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get reservation_date() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set reservation_date(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get guest_count() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set guest_count(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            table_id?: string;
            reservation_date?: string;
            guest_count?: number;
            status?: string;
        }): UpdateReservationRequest {
            const message = new UpdateReservationRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.table_id != null) {
                message.table_id = data.table_id;
            }
            if (data.reservation_date != null) {
                message.reservation_date = data.reservation_date;
            }
            if (data.guest_count != null) {
                message.guest_count = data.guest_count;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                table_id?: string;
                reservation_date?: string;
                guest_count?: number;
                status?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.table_id != null) {
                data.table_id = this.table_id;
            }
            if (this.reservation_date != null) {
                data.reservation_date = this.reservation_date;
            }
            if (this.guest_count != null) {
                data.guest_count = this.guest_count;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.table_id.length)
                writer.writeString(2, this.table_id);
            if (this.reservation_date.length)
                writer.writeString(3, this.reservation_date);
            if (this.guest_count != 0)
                writer.writeInt32(4, this.guest_count);
            if (this.status.length)
                writer.writeString(5, this.status);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateReservationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateReservationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.table_id = reader.readString();
                        break;
                    case 3:
                        message.reservation_date = reader.readString();
                        break;
                    case 4:
                        message.guest_count = reader.readInt32();
                        break;
                    case 5:
                        message.status = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UpdateReservationRequest {
            return UpdateReservationRequest.deserialize(bytes);
        }
    }
    export class DeleteReservationRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): DeleteReservationRequest {
            const message = new DeleteReservationRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteReservationRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteReservationRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteReservationRequest {
            return DeleteReservationRequest.deserialize(bytes);
        }
    }
    export class Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            success?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            message?: string;
            success?: boolean;
        }): Response {
            const message = new Response({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                success?: boolean;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Response {
            return Response.deserialize(bytes);
        }
    }
    export class Reservation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            user_id?: string;
            table_id?: string;
            reservation_date?: string;
            guest_count?: number;
            status?: string;
            create_at?: string;
            update_at?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("table_id" in data && data.table_id != undefined) {
                    this.table_id = data.table_id;
                }
                if ("reservation_date" in data && data.reservation_date != undefined) {
                    this.reservation_date = data.reservation_date;
                }
                if ("guest_count" in data && data.guest_count != undefined) {
                    this.guest_count = data.guest_count;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("create_at" in data && data.create_at != undefined) {
                    this.create_at = data.create_at;
                }
                if ("update_at" in data && data.update_at != undefined) {
                    this.update_at = data.update_at;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get table_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set table_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get reservation_date() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set reservation_date(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get guest_count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set guest_count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get create_at() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set create_at(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get update_at() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set update_at(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            user_id?: string;
            table_id?: string;
            reservation_date?: string;
            guest_count?: number;
            status?: string;
            create_at?: string;
            update_at?: string;
        }): Reservation {
            const message = new Reservation({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.table_id != null) {
                message.table_id = data.table_id;
            }
            if (data.reservation_date != null) {
                message.reservation_date = data.reservation_date;
            }
            if (data.guest_count != null) {
                message.guest_count = data.guest_count;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.create_at != null) {
                message.create_at = data.create_at;
            }
            if (data.update_at != null) {
                message.update_at = data.update_at;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                user_id?: string;
                table_id?: string;
                reservation_date?: string;
                guest_count?: number;
                status?: string;
                create_at?: string;
                update_at?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.table_id != null) {
                data.table_id = this.table_id;
            }
            if (this.reservation_date != null) {
                data.reservation_date = this.reservation_date;
            }
            if (this.guest_count != null) {
                data.guest_count = this.guest_count;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.create_at != null) {
                data.create_at = this.create_at;
            }
            if (this.update_at != null) {
                data.update_at = this.update_at;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.user_id.length)
                writer.writeString(2, this.user_id);
            if (this.table_id.length)
                writer.writeString(3, this.table_id);
            if (this.reservation_date.length)
                writer.writeString(4, this.reservation_date);
            if (this.guest_count != 0)
                writer.writeInt32(5, this.guest_count);
            if (this.status.length)
                writer.writeString(6, this.status);
            if (this.create_at.length)
                writer.writeString(7, this.create_at);
            if (this.update_at.length)
                writer.writeString(8, this.update_at);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reservation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reservation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.user_id = reader.readString();
                        break;
                    case 3:
                        message.table_id = reader.readString();
                        break;
                    case 4:
                        message.reservation_date = reader.readString();
                        break;
                    case 5:
                        message.guest_count = reader.readInt32();
                        break;
                    case 6:
                        message.status = reader.readString();
                        break;
                    case 7:
                        message.create_at = reader.readString();
                        break;
                    case 8:
                        message.update_at = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reservation {
            return Reservation.deserialize(bytes);
        }
    }
    export class Reservations extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            reservations?: Reservation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("reservations" in data && data.reservations != undefined) {
                    this.reservations = data.reservations;
                }
            }
        }
        get reservations() {
            return pb_1.Message.getRepeatedWrapperField(this, Reservation, 1) as Reservation[];
        }
        set reservations(value: Reservation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            reservations?: ReturnType<typeof Reservation.prototype.toObject>[];
        }): Reservations {
            const message = new Reservations({});
            if (data.reservations != null) {
                message.reservations = data.reservations.map(item => Reservation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                reservations?: ReturnType<typeof Reservation.prototype.toObject>[];
            } = {};
            if (this.reservations != null) {
                data.reservations = this.reservations.map((item: Reservation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.reservations.length)
                writer.writeRepeatedMessage(1, this.reservations, (item: Reservation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Reservations {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Reservations();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.reservations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Reservation.deserialize(reader), Reservation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Reservations {
            return Reservations.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedReservationServiceService {
        static definition = {
            CreateReservation: {
                path: "/reservation.ReservationService/CreateReservation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: CreateReservationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => CreateReservationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
            },
            GetReservationByID: {
                path: "/reservation.ReservationService/GetReservationByID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetReservationByIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetReservationByIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Reservation) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Reservation.deserialize(new Uint8Array(bytes))
            },
            GetReservationsByUserID: {
                path: "/reservation.ReservationService/GetReservationsByUserID",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetReservationsByUserIDRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetReservationsByUserIDRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Reservations) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Reservations.deserialize(new Uint8Array(bytes))
            },
            GetReservationsByDate: {
                path: "/reservation.ReservationService/GetReservationsByDate",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetReservationsByDateRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetReservationsByDateRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Reservations) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Reservations.deserialize(new Uint8Array(bytes))
            },
            UpdateReservation: {
                path: "/reservation.ReservationService/UpdateReservation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: UpdateReservationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => UpdateReservationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
            },
            DeleteReservation: {
                path: "/reservation.ReservationService/DeleteReservation",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteReservationRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteReservationRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Response.deserialize(new Uint8Array(bytes))
            },
            sayHello: {
                path: "/reservation.ReservationService/sayHello",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Message) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Message) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract CreateReservation(call: grpc_1.ServerUnaryCall<CreateReservationRequest, Response>, callback: grpc_1.sendUnaryData<Response>): void;
        abstract GetReservationByID(call: grpc_1.ServerUnaryCall<GetReservationByIDRequest, Reservation>, callback: grpc_1.sendUnaryData<Reservation>): void;
        abstract GetReservationsByUserID(call: grpc_1.ServerUnaryCall<GetReservationsByUserIDRequest, Reservations>, callback: grpc_1.sendUnaryData<Reservations>): void;
        abstract GetReservationsByDate(call: grpc_1.ServerUnaryCall<GetReservationsByDateRequest, Reservations>, callback: grpc_1.sendUnaryData<Reservations>): void;
        abstract UpdateReservation(call: grpc_1.ServerUnaryCall<UpdateReservationRequest, Response>, callback: grpc_1.sendUnaryData<Response>): void;
        abstract DeleteReservation(call: grpc_1.ServerUnaryCall<DeleteReservationRequest, Response>, callback: grpc_1.sendUnaryData<Response>): void;
        abstract sayHello(call: grpc_1.ServerUnaryCall<Message, Message>, callback: grpc_1.sendUnaryData<Message>): void;
    }
    export class ReservationServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedReservationServiceService.definition, "ReservationService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        CreateReservation: GrpcUnaryServiceInterface<CreateReservationRequest, Response> = (message: CreateReservationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
            return super.CreateReservation(message, metadata, options, callback);
        };
        GetReservationByID: GrpcUnaryServiceInterface<GetReservationByIDRequest, Reservation> = (message: GetReservationByIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Reservation>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Reservation>, callback?: grpc_1.requestCallback<Reservation>): grpc_1.ClientUnaryCall => {
            return super.GetReservationByID(message, metadata, options, callback);
        };
        GetReservationsByUserID: GrpcUnaryServiceInterface<GetReservationsByUserIDRequest, Reservations> = (message: GetReservationsByUserIDRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Reservations>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Reservations>, callback?: grpc_1.requestCallback<Reservations>): grpc_1.ClientUnaryCall => {
            return super.GetReservationsByUserID(message, metadata, options, callback);
        };
        GetReservationsByDate: GrpcUnaryServiceInterface<GetReservationsByDateRequest, Reservations> = (message: GetReservationsByDateRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Reservations>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Reservations>, callback?: grpc_1.requestCallback<Reservations>): grpc_1.ClientUnaryCall => {
            return super.GetReservationsByDate(message, metadata, options, callback);
        };
        UpdateReservation: GrpcUnaryServiceInterface<UpdateReservationRequest, Response> = (message: UpdateReservationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
            return super.UpdateReservation(message, metadata, options, callback);
        };
        DeleteReservation: GrpcUnaryServiceInterface<DeleteReservationRequest, Response> = (message: DeleteReservationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Response>, callback?: grpc_1.requestCallback<Response>): grpc_1.ClientUnaryCall => {
            return super.DeleteReservation(message, metadata, options, callback);
        };
        sayHello: GrpcUnaryServiceInterface<Message, Message> = (message: Message, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Message>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Message>, callback?: grpc_1.requestCallback<Message>): grpc_1.ClientUnaryCall => {
            return super.sayHello(message, metadata, options, callback);
        };
    }
}
