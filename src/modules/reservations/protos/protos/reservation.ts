// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.5.1
//   protoc               v3.20.3
// source: protos/protos/reservation.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "reservation";

export interface Message {
  body: string;
}

export interface CreateReservationRequest {
  userId: string;
  tableId: string;
  reservationDate: string;
  reservationTime: string;
  guestCount: number;
  status: string;
}

export interface GetReservationByIDRequest {
  id: string;
}

export interface GetReservationsByUserIDRequest {
  userId: string;
}

export interface GetReservationsByDateRequest {
  reservationDate: string;
}

export interface UpdateReservationRequest {
  id: string;
  tableId: string;
  reservationDate: string;
  reservationTime: string;
  guestCount: number;
  status: string;
}

export interface DeleteReservationRequest {
  id: string;
}

export interface Response {
  message: string;
  success: boolean;
}

export interface Reservation {
  id: string;
  userId: string;
  tableId: string;
  reservationDate: string;
  reservationTime: string;
  guestCount: number;
  status: string;
  createAt: string;
  updateAt: string;
}

export interface Reservations {
  reservations: Reservation[];
}

export interface Empty {
}

export interface CreateTableRequest {
  number: number;
  capacity: number;
  isReserved: boolean;
}

export interface UpdateTableRequest {
  id: string;
  capacity: number;
  isReserved: boolean;
}

export interface GetAvailableTablesRequest {
  reservationDate: string;
}

export interface Table {
  id: string;
  number: number;
  capacity: number;
  isReserved: boolean;
}

export interface Tables {
  tables: Table[];
}

export const RESERVATION_PACKAGE_NAME = "reservation";

export interface ReservationServiceClient {
  createReservation(request: CreateReservationRequest): Observable<Response>;

  getReservationById(request: GetReservationByIDRequest): Observable<Reservation>;

  getReservationsByUserId(request: GetReservationsByUserIDRequest): Observable<Reservations>;

  getReservationsByDate(request: GetReservationsByDateRequest): Observable<Reservations>;

  updateReservation(request: UpdateReservationRequest): Observable<Response>;

  deleteReservation(request: DeleteReservationRequest): Observable<Response>;
}

export interface ReservationServiceController {
  createReservation(request: CreateReservationRequest): Promise<Response> | Observable<Response> | Response;

  getReservationById(request: GetReservationByIDRequest): Promise<Reservation> | Observable<Reservation> | Reservation;

  getReservationsByUserId(
    request: GetReservationsByUserIDRequest,
  ): Promise<Reservations> | Observable<Reservations> | Reservations;

  getReservationsByDate(
    request: GetReservationsByDateRequest,
  ): Promise<Reservations> | Observable<Reservations> | Reservations;

  updateReservation(request: UpdateReservationRequest): Promise<Response> | Observable<Response> | Response;

  deleteReservation(request: DeleteReservationRequest): Promise<Response> | Observable<Response> | Response;
}

export function ReservationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createReservation",
      "getReservationById",
      "getReservationsByUserId",
      "getReservationsByDate",
      "updateReservation",
      "deleteReservation",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ReservationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ReservationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const RESERVATION_SERVICE_NAME = "ReservationService";

export interface TableServiceClient {
  createTable(request: CreateTableRequest): Observable<Response>;

  getTables(request: Empty): Observable<Tables>;

  updateTable(request: UpdateTableRequest): Observable<Response>;

  getAvailableTables(request: GetAvailableTablesRequest): Observable<Tables>;
}

export interface TableServiceController {
  createTable(request: CreateTableRequest): Promise<Response> | Observable<Response> | Response;

  getTables(request: Empty): Promise<Tables> | Observable<Tables> | Tables;

  updateTable(request: UpdateTableRequest): Promise<Response> | Observable<Response> | Response;

  getAvailableTables(request: GetAvailableTablesRequest): Promise<Tables> | Observable<Tables> | Tables;
}

export function TableServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createTable", "getTables", "updateTable", "getAvailableTables"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("TableService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("TableService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const TABLE_SERVICE_NAME = "TableService";
